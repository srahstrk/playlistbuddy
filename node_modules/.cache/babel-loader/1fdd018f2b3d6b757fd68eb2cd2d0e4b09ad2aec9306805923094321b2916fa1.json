{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"./spotifyAuth\";\nimport { fetchSpotifyData } from \"./spotifyApi\";\nimport Header from './components/Header';\nimport Searchbar from './components/Searchbar';\nimport Searchresult from './components/Searchresults';\nimport Playlist from './components/Playlist';\nimport Spotify from './components/SaveToSpotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlistName, setPlaylistName] = useState('New Playlist');\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const [trackUris, setTrackUris] = useState([]);\n  const handleSearch = query => {\n    setSearchQuery(query);\n  };\n  const updatePlaylistName = name => {\n    setPlaylistName(name);\n  };\n  const addTrack = track => {\n    if (playlistTracks.find(savedTrack => savedTrack.id === track.id)) return;\n\n    // Add the track to playlistTracks\n    setPlaylistTracks(prevTracks => [...prevTracks, track]);\n\n    // Add the track URI to trackUris\n    setTrackUris(prevUris => [...prevUris, track.uri]);\n  };\n  const removeTrack = track => {\n    setPlaylistTracks(prevTracks => prevTracks.filter(savedTrack => savedTrack.id !== track.id));\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!searchQuery) return;\n      try {\n        var _fetchedSearchData$tr;\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedSearchData = await fetchSpotifyData(`/search?q=${searchQuery}&type=track`, token);\n        const tracks = ((_fetchedSearchData$tr = fetchedSearchData.tracks) === null || _fetchedSearchData$tr === void 0 ? void 0 : _fetchedSearchData$tr.items) || [];\n        // Step 3: Update state with the fetched data\n        setSearchResults(tracks); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n    fetchData(); // Call the async function\n  }, [searchQuery]); // \n\n  const clearPlaylist = () => {\n    setPlaylistTracks([]);\n    setTrackUris([]);\n  };\n  const savePlaylist = () => {\n    if (!playlistName || trackUris.length === 0) {\n      alert(\"Please provide a playlist name and add tracks before saving.\");\n      return;\n    }\n    Spotify.savePlaylist(playlistName, trackUris).then(() => {\n      console.log(\"Playlist saved successfully!\");\n      clearPlaylist(); // Clear the playlist after saving\n    }).catch(error => {\n      console.error(\"Error saving playlist:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: true,\n      children: /*#__PURE__*/_jsxDEV(Searchbar, {\n        onSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Searchresult, {\n        tracks: searchResults,\n        onAdd: addTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n        playlistName: playlistName,\n        playlistTracks: playlistTracks,\n        onNameChange: updatePlaylistName,\n        onRemove: removeTrack,\n        trackUris: trackUris,\n        onSave: savePlaylist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"B/FKUTE27bBw8IUc8csSJ3OPU8w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","getSpotifyToken","fetchSpotifyData","Header","Searchbar","Searchresult","Playlist","Spotify","jsxDEV","_jsxDEV","App","_s","searchQuery","setSearchQuery","searchResults","setSearchResults","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","clientId","clientSecret","trackUris","setTrackUris","handleSearch","query","updatePlaylistName","name","addTrack","track","find","savedTrack","id","prevTracks","prevUris","uri","removeTrack","filter","fetchData","_fetchedSearchData$tr","token","fetchedSearchData","tracks","items","error","console","clearPlaylist","savePlaylist","length","alert","then","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSearch","onAdd","onNameChange","onRemove","onSave","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"./spotifyAuth\";\nimport { fetchSpotifyData } from \"./spotifyApi\";\nimport Header from './components/Header';\nimport Searchbar from './components/Searchbar';\nimport Searchresult from './components/Searchresults';\nimport Playlist from './components/Playlist';\nimport Spotify from './components/SaveToSpotify';\n\n\nfunction App() {\n  const [searchQuery, setSearchQuery] = useState('');\nconst [searchResults, setSearchResults] = useState([]);\nconst [playlistName, setPlaylistName] = useState('New Playlist'); \nconst [playlistTracks, setPlaylistTracks] = useState([]); \nconst clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\"; \nconst [trackUris, setTrackUris] = useState([]);\n\n\nconst handleSearch = (query) => {\n  setSearchQuery(query);\n};\n\nconst updatePlaylistName = (name) => {\n  setPlaylistName(name);\n};\n\nconst addTrack = (track) => {\n  if (playlistTracks.find((savedTrack) => savedTrack.id === track.id)) return;\n\n  // Add the track to playlistTracks\n  setPlaylistTracks((prevTracks) => [...prevTracks, track]);\n\n  // Add the track URI to trackUris\n  setTrackUris((prevUris) => [...prevUris, track.uri]);\n};\n\n\n\nconst removeTrack = (track) => {\n  setPlaylistTracks((prevTracks) =>\n    prevTracks.filter((savedTrack) => savedTrack.id !== track.id)\n  );\n};\n\n useEffect(() => {\n    const fetchData = async () => {\n      if (!searchQuery) return;\n\n      try {\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedSearchData = await fetchSpotifyData(`/search?q=${searchQuery}&type=track`, token);\n        const tracks = fetchedSearchData.tracks?.items || [];\n        // Step 3: Update state with the fetched data\n        setSearchResults(tracks); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n\n    fetchData(); // Call the async function\n  }, [searchQuery]); // \n\n  const clearPlaylist = () => {\n    setPlaylistTracks([]);\n    setTrackUris([]);\n  };\n\n  const savePlaylist = () => {\n    if (!playlistName || trackUris.length === 0) {\n      alert(\"Please provide a playlist name and add tracks before saving.\");\n      return;\n    }\n  \n    Spotify.savePlaylist(playlistName, trackUris)\n      .then(() => {\n        console.log(\"Playlist saved successfully!\");\n        clearPlaylist(); // Clear the playlist after saving\n      })\n      .catch((error) => {\n        console.error(\"Error saving playlist:\", error);\n      });\n  };\n\n\n\n  return (\n    <div>\n      <Header/>\n      <div className>\n      <Searchbar onSearch={handleSearch} />\n    </div>\n      <div className='wrapper'>\n      <Searchresult tracks={searchResults} onAdd={addTrack}/>\n      <Playlist\n        playlistName={playlistName}\n        playlistTracks={playlistTracks}\n        onNameChange={updatePlaylistName}\n        onRemove={removeTrack}\n        trackUris={trackUris}\n        onSave={savePlaylist}\n      />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}