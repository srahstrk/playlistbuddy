{"ast":null,"code":"// spotifyAuth.js\n\nexport async function getSpotifyToken(clientId, clientSecret) {\n  // 1. Combine clientId and clientSecret into a Base64-encoded string\n  const credentials = btoa(`${clientId}:${clientSecret}`);\n\n  // 2. Define the endpoint for requesting a token\n  const tokenUrl = \"https://accounts.spotify.com/api/token\";\n\n  // 3. Prepare the request options\n  const requestOptions = {\n    method: \"POST\",\n    // We are sending a POST request as per the Spotify documentation.\n    headers: {\n      // Authorization header: Pass the encoded client credentials\n      Authorization: `Basic ${credentials}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\" // Inform Spotify of the data type being sent\n    },\n    body: \"grant_type=client_credentials\" // Send 'grant_type=client_credentials' to specify the type of token\n  };\n  try {\n    // 4. Make the API request using fetch\n    const response = await fetch(tokenUrl, requestOptions);\n\n    // 5. Check if the response is successful (status 200)\n    if (!response.ok) {\n      throw new Error(`Error fetching Spotify token: ${response.status} ${response.statusText}`);\n    }\n\n    // 6. Parse the JSON response to extract the token\n    const data = await response.json();\n\n    // 7. Return the access token\n    return data.access_token;\n  } catch (error) {\n    // 8. Handle any errors that occur during the request\n    console.error(\"Failed to fetch Spotify token:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["getSpotifyToken","clientId","clientSecret","credentials","btoa","tokenUrl","requestOptions","method","headers","Authorization","body","response","fetch","ok","Error","status","statusText","data","json","access_token","error","console"],"sources":["/Users/sarah/Documents/Projects/React/playlistBuddy/playlistBuddy/src/spotifyAuth.js"],"sourcesContent":["// spotifyAuth.js\n\nexport async function getSpotifyToken(clientId, clientSecret) {\n    // 1. Combine clientId and clientSecret into a Base64-encoded string\n    const credentials = btoa(`${clientId}:${clientSecret}`);\n    \n    // 2. Define the endpoint for requesting a token\n    const tokenUrl = \"https://accounts.spotify.com/api/token\";\n    \n    // 3. Prepare the request options\n    const requestOptions = {\n      method: \"POST\", // We are sending a POST request as per the Spotify documentation.\n      headers: {\n        // Authorization header: Pass the encoded client credentials\n        Authorization: `Basic ${credentials}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // Inform Spotify of the data type being sent\n      },\n      body: \"grant_type=client_credentials\", // Send 'grant_type=client_credentials' to specify the type of token\n    };\n  \n    try {\n      // 4. Make the API request using fetch\n      const response = await fetch(tokenUrl, requestOptions);\n  \n      // 5. Check if the response is successful (status 200)\n      if (!response.ok) {\n        throw new Error(`Error fetching Spotify token: ${response.status} ${response.statusText}`);\n      }\n  \n      // 6. Parse the JSON response to extract the token\n      const data = await response.json();\n      \n      // 7. Return the access token\n      return data.access_token;\n    } catch (error) {\n      // 8. Handle any errors that occur during the request\n      console.error(\"Failed to fetch Spotify token:\", error);\n      throw error;\n    }\n  }\n  "],"mappings":"AAAA;;AAEA,OAAO,eAAeA,eAAeA,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC1D;EACA,MAAMC,WAAW,GAAGC,IAAI,CAAC,GAAGH,QAAQ,IAAIC,YAAY,EAAE,CAAC;;EAEvD;EACA,MAAMG,QAAQ,GAAG,wCAAwC;;EAEzD;EACA,MAAMC,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IAAE;IAChBC,OAAO,EAAE;MACP;MACAC,aAAa,EAAE,SAASN,WAAW,EAAE;MACrC,cAAc,EAAE,mCAAmC,CAAE;IACvD,CAAC;IACDO,IAAI,EAAE,+BAA+B,CAAE;EACzC,CAAC;EAED,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAQ,EAAEC,cAAc,CAAC;;IAEtD;IACA,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IAC5F;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;IAElC;IACA,OAAOD,IAAI,CAACE,YAAY;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}