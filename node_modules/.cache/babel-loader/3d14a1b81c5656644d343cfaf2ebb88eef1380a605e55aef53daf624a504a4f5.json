{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/Searchbar.js\",\n  _s = $RefreshSig$();\nimport '../searchbar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Searchbar = () => {\n  _s();\n  const [searchResults, setSearchResults] = useState();\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const searchEndPoint = '/search';\n  const searchQuery = 'Civic';\n  const urlToFetch = `${searchEndPoint}?q=${searchQuery}&type=track&limit=20`;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _fetchedData$tracks;\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedData = await fetchSpotifyData(urlToFetch, token);\n        const tracks = ((_fetchedData$tracks = fetchedData.tracks) === null || _fetchedData$tracks === void 0 ? void 0 : _fetchedData$tracks.items) || [];\n        // Step 3: Update state with the fetched data\n        setSearchResults(tracks); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n    fetchData(); // Call the async function\n  }, []); // Empty dependency array ensures the effect runs only once\n  console.log(searchResults);\n  // Step 4: Render the data (or a loading state)\n  if (!searchResults) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this); // Show a loading message while data is being fetched;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Let's start! Just search your favourite song and start adding it to your playlist.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchSpotifyData,\n          children: \"SEARCH\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n};\n_s(Searchbar, \"m9nd1ZkMVj2TRFIriMTMoEpAA8Q=\");\n_c = Searchbar;\nexport default Searchbar;\nvar _c;\n$RefreshReg$(_c, \"Searchbar\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Searchbar","_s","searchResults","setSearchResults","useState","clientId","clientSecret","searchEndPoint","searchQuery","urlToFetch","useEffect","fetchData","_fetchedData$tracks","token","getSpotifyToken","fetchedData","fetchSpotifyData","tracks","items","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/Searchbar.js"],"sourcesContent":["\nimport '../searchbar.css';\n\nconst Searchbar = () => {\nconst [searchResults, setSearchResults] = useState();\nconst clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\"; \n const searchEndPoint = '/search'; \n const searchQuery = 'Civic';\n const urlToFetch = `${searchEndPoint}?q=${searchQuery}&type=track&limit=20`;\n\n useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedData = await fetchSpotifyData(urlToFetch, token);\n\n        const tracks = fetchedData.tracks?.items || [];\n        // Step 3: Update state with the fetched data\n        setSearchResults(tracks); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n\n    fetchData(); // Call the async function\n  }, []); // Empty dependency array ensures the effect runs only once\n  console.log(searchResults)\n  // Step 4: Render the data (or a loading state)\n  if (!searchResults) {\n    return <div>Loading...</div>; // Show a loading message while data is being fetched;\n  }\n else {\n\n\n    return (\n        <div className='searchbar'>\n        <h2>Let's start! Just search your favourite song and start adding it to your playlist.</h2> \n        <form>\n        <input>\n        </input>\n        <button onClick={fetchSpotifyData}>\n        SEARCH\n        </button> \n        </form>     \n        </div>\n    )\n}\n}\n\nexport default Searchbar"],"mappings":";;AACA,OAAO,kBAAkB;AAAC,SAAAA,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGC,QAAQ,CAAC,CAAC;EACpD,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,YAAY,GAAG,kCAAkC;EACtD,MAAMC,cAAc,GAAG,SAAS;EAChC,MAAMC,WAAW,GAAG,OAAO;EAC3B,MAAMC,UAAU,GAAG,GAAGF,cAAc,MAAMC,WAAW,sBAAsB;EAE3EE,SAAS,CAAC,MAAM;IACb,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QAAA,IAAAC,mBAAA;QACF;QACA,MAAMC,KAAK,GAAG,MAAMC,eAAe,CAACT,QAAQ,EAAEC,YAAY,CAAC;QAC3D;QACA,MAAMS,WAAW,GAAG,MAAMC,gBAAgB,CAACP,UAAU,EAAEI,KAAK,CAAC;QAE7D,MAAMI,MAAM,GAAG,EAAAL,mBAAA,GAAAG,WAAW,CAACE,MAAM,cAAAL,mBAAA,uBAAlBA,mBAAA,CAAoBM,KAAK,KAAI,EAAE;QAC9C;QACAf,gBAAgB,CAACc,MAAM,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDR,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACRS,OAAO,CAACC,GAAG,CAACnB,aAAa,CAAC;EAC1B;EACA,IAAI,CAACA,aAAa,EAAE;IAClB,oBAAOH,OAAA;MAAAuB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAChC,CAAC,MACG;IAGF,oBACI3B,OAAA;MAAK4B,SAAS,EAAC,WAAW;MAAAL,QAAA,gBAC1BvB,OAAA;QAAAuB,QAAA,EAAI;MAAkF;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3F3B,OAAA;QAAAuB,QAAA,gBACAvB,OAAA;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC,eACR3B,OAAA;UAAQ6B,OAAO,EAAEZ,gBAAiB;UAAAM,QAAA,EAAC;QAEnC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEd;AACA,CAAC;AAAAzB,EAAA,CA/CKD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAiDf,eAAeA,SAAS;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}