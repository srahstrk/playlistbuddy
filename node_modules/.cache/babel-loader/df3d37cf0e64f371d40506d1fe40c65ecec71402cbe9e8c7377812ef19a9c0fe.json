{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/Searchresults.js\",\n  _s = $RefreshSig$();\nimport Searchbar from './Searchbar';\nimport Tracklist from './Tracklist';\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Searchresults = () => {\n  _s();\n  const [searchResults, setData] = useState(null);\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const searchEndPoint = '/search';\n  const searchQuery = 'Civic';\n  const urlToFetch = `${searchEndPoint}?q=${searchQuery}&type=track&limit=20`;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedData = await fetchSpotifyData(urlToFetch, token);\n        // Step 3: Update state with the fetched data\n        setData(fetchedData | []); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n    fetchData(); // Call the async function\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  // Step 4: Render the data (or a loading state)\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this); // Show a loading message while data is being fetched\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Tracklist, {\n        tracks: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this);\n  }\n};\n_s(Searchresults, \"D/JvlRrMCm+4B2XA704/7vN0P5M=\");\n_c = Searchresults;\nexport default Searchresults;\nvar _c;\n$RefreshReg$(_c, \"Searchresults\");","map":{"version":3,"names":["Searchbar","Tracklist","React","useState","useEffect","getSpotifyToken","fetchSpotifyData","jsxDEV","_jsxDEV","Searchresults","_s","searchResults","setData","clientId","clientSecret","searchEndPoint","searchQuery","urlToFetch","fetchData","token","fetchedData","error","console","data","children","fileName","_jsxFileName","lineNumber","columnNumber","tracks","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/Searchresults.js"],"sourcesContent":["import Searchbar from './Searchbar';\nimport Tracklist from './Tracklist';\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\n\n\nconst Searchresults = () => {\nconst [searchResults, setData] = useState(null);\nconst clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\"; \n const searchEndPoint = '/search'; \n const searchQuery = 'Civic';\n const urlToFetch = `${searchEndPoint}?q=${searchQuery}&type=track&limit=20`;\n\n useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Step 1: Get Spotify API Token\n        const token = await getSpotifyToken(clientId, clientSecret);\n        // Step 2: Fetch data from Spotify API\n        const fetchedData = await fetchSpotifyData(urlToFetch, token);\n        // Step 3: Update state with the fetched data\n        setData(fetchedData | []); // Update state with the fetched data\n      } catch (error) {\n        console.error(\"Error fetching Spotify data:\", error);\n      }\n    };\n\n    fetchData(); // Call the async function\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  // Step 4: Render the data (or a loading state)\n  if (!data) {\n    return <div>Loading...</div>; // Show a loading message while data is being fetched\n  }\n else {\n  return (\n    <div>\n      <h1>Results</h1>\n      <Tracklist tracks={data} /> \n    </div>\n  );\n }\n\n}\n\n\nexport default Searchresults;"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SAASC,gBAAgB,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGjD,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAMU,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,YAAY,GAAG,kCAAkC;EACtD,MAAMC,cAAc,GAAG,SAAS;EAChC,MAAMC,WAAW,GAAG,OAAO;EAC3B,MAAMC,UAAU,GAAG,GAAGF,cAAc,MAAMC,WAAW,sBAAsB;EAE3EZ,SAAS,CAAC,MAAM;IACb,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,KAAK,GAAG,MAAMd,eAAe,CAACQ,QAAQ,EAAEC,YAAY,CAAC;QAC3D;QACA,MAAMM,WAAW,GAAG,MAAMd,gBAAgB,CAACW,UAAU,EAAEE,KAAK,CAAC;QAC7D;QACAP,OAAO,CAACQ,WAAW,GAAG,EAAE,CAAC,CAAC,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDH,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAI,CAACK,IAAI,EAAE;IACT,oBAAOf,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAChC,CAAC,MACG;IACJ,oBACEpB,OAAA;MAAAgB,QAAA,gBACEhB,OAAA;QAAAgB,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBpB,OAAA,CAACP,SAAS;QAAC4B,MAAM,EAAEN;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAET;AAED,CAAC;AAAAlB,EAAA,CAtCKD,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAyCnB,eAAeA,aAAa;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}