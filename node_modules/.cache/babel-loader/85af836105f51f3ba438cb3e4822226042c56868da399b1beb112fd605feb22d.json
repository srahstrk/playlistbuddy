{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SaveToSpotify = ({\n  playlistTracks,\n  playlistName\n}) => {\n  _s();\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const redirectUri = 'http://your-app/callback'; // Your callback URL\n  const scopes = 'playlist-modify-public playlist-modify-private';\n  const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&scope=${scopes}`;\n  window.location.href = authUrl;\n  const code = new URLSearchParams(window.location.search).get('code');\n  const getToken = async code => {\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Basic ${btoa(clientId + ':' + clientSecret)}`,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: redirectUri\n      })\n    });\n    const data = await response.json();\n    return data.access_token; // Return the access token\n  };\n  const accessToken = getToken(code);\n\n  // Function to create a new playlist\n  const createPlaylist = async accessToken => {\n    try {\n      // Get user ID\n      const userData = await fetchSpotifyData('/me', accessToken); // Using your fetchSpotifyData function\n      const userId = userData.id;\n\n      // Create new playlist\n      const createPlaylistResponse = await fetchSpotifyData(`/users/${userId}/playlists`, accessToken, {\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName,\n          description: 'A custom playlist from Jammming!',\n          public: true\n        })\n      });\n      const playlistId = createPlaylistResponse.id;\n\n      // Step 2: Add tracks to the newly created playlist\n      await addTracksToPlaylist(playlistId, accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error creating playlist:', err);\n    }\n  };\n\n  // Function to add tracks to the playlist\n  const addTracksToPlaylist = async (playlistId, accessToken) => {\n    try {\n      const trackUris = playlistTracks.map(track => track.uri);\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: trackUris // Pass the track URIs\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error adding tracks to playlist');\n      }\n      console.log('Tracks added successfully!');\n    } catch (err) {\n      setError(err.message);\n      console.error('Error adding tracks:', err);\n    }\n  };\n\n  // Handle the Save To Spotify button click\n  const handleSaveToSpotify = async () => {\n    setIsSaving(true);\n    setError(null);\n    try {\n      if (!accessToken) {\n        throw new Error('Failed to obtain access token');\n      }\n\n      // Step 2: Create playlist and add tracks after getting the token\n      await createPlaylist(accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error saving playlist:', err);\n    }\n    setIsSaving(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveToSpotify,\n      disabled: isSaving,\n      children: isSaving ? 'Saving to Spotify...' : 'Save To Spotify'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(SaveToSpotify, \"okUNVmbIMr63w2X5gaeUA6+BQsI=\");\n_c = SaveToSpotify;\nexport default SaveToSpotify;\nvar _c;\n$RefreshReg$(_c, \"SaveToSpotify\");","map":{"version":3,"names":["React","useState","useEffect","getSpotifyToken","fetchSpotifyData","jsxDEV","_jsxDEV","SaveToSpotify","playlistTracks","playlistName","_s","isSaving","setIsSaving","error","setError","clientId","clientSecret","redirectUri","scopes","authUrl","window","location","href","code","URLSearchParams","search","get","getToken","response","fetch","method","headers","btoa","body","grant_type","redirect_uri","data","json","access_token","accessToken","createPlaylist","userData","userId","id","createPlaylistResponse","JSON","stringify","name","description","public","playlistId","addTracksToPlaylist","err","message","console","trackUris","map","track","uri","addTracksResponse","Authorization","uris","ok","Error","log","handleSaveToSpotify","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\n\nconst SaveToSpotify = ({ playlistTracks, playlistName }) => {\n    const [isSaving, setIsSaving] = useState(false);\n    const [error, setError] = useState(null);\n    const clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\nconst redirectUri = 'http://your-app/callback';  // Your callback URL\nconst scopes = 'playlist-modify-public playlist-modify-private';\nconst authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&scope=${scopes}`;\n\nwindow.location.href = authUrl;\n\nconst code = new URLSearchParams(window.location.search).get('code');\n\nconst getToken = async (code) => {\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Basic ${btoa(clientId + ':' + clientSecret)}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: new URLSearchParams({\n      grant_type: 'authorization_code',\n      code,\n      redirect_uri: redirectUri,\n    }),\n  });\n  const data = await response.json();\n  return data.access_token;  // Return the access token\n};\n\nconst accessToken = getToken(code);\n\n  // Function to create a new playlist\n  const createPlaylist = async (accessToken) => {\n    try {\n      // Get user ID\n      const userData = await fetchSpotifyData('/me', accessToken);  // Using your fetchSpotifyData function\n      const userId = userData.id;\n\n      // Create new playlist\n      const createPlaylistResponse = await fetchSpotifyData(`/users/${userId}/playlists`, accessToken, {\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName,\n          description: 'A custom playlist from Jammming!',\n          public: true,\n        }),\n      });\n\n      const playlistId = createPlaylistResponse.id;\n\n      // Step 2: Add tracks to the newly created playlist\n      await addTracksToPlaylist(playlistId, accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error creating playlist:', err);\n    }\n  };\n\n  // Function to add tracks to the playlist\n  const addTracksToPlaylist = async (playlistId, accessToken) => {\n    try {\n      const trackUris = playlistTracks.map((track) => track.uri);\n\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          uris: trackUris,  // Pass the track URIs\n        }),\n      });\n\n      if (!addTracksResponse.ok) {\n        throw new Error('Error adding tracks to playlist');\n      }\n\n      console.log('Tracks added successfully!');\n    } catch (err) {\n      setError(err.message);\n      console.error('Error adding tracks:', err);\n    }\n  };\n\n  // Handle the Save To Spotify button click\n  const handleSaveToSpotify = async () => {\n    setIsSaving(true);\n    setError(null);\n\n    try {\n    \n      if (!accessToken) {\n        throw new Error('Failed to obtain access token');\n      }\n\n      // Step 2: Create playlist and add tracks after getting the token\n      await createPlaylist(accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error saving playlist:', err);\n    }\n\n    setIsSaving(false);\n  };\n\n  return (\n    <div>\n      <button onClick={handleSaveToSpotify} disabled={isSaving}>\n        {isSaving ? 'Saving to Spotify...' : 'Save To Spotify'}\n      </button>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default SaveToSpotify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}