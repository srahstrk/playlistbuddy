{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SaveToSpotify = ({\n  playlistTracks,\n  playlistName\n}) => {\n  _s();\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const token = getSpotifyToken(clientId, clientSecret);\n\n  // Function to create a new playlist\n  const createPlaylist = async accessToken => {\n    try {\n      // Get user ID\n      const userData = await fetchSpotifyData('/me', token); // Using your fetchSpotifyData function\n      const userId = userData.id;\n\n      // Create new playlist\n      const createPlaylistResponse = await fetchSpotifyData(`/users/${userId}/playlists`, token, {\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName,\n          description: 'A custom playlist from Jammming!',\n          public: true\n        })\n      });\n      const playlistId = createPlaylistResponse.id;\n\n      // Step 2: Add tracks to the newly created playlist\n      await addTracksToPlaylist(playlistId, token);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error creating playlist:', err);\n    }\n  };\n\n  // Function to add tracks to the playlist\n  const addTracksToPlaylist = async (playlistId, accessToken) => {\n    try {\n      const trackUris = playlistTracks.map(track => track.uri);\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: trackUris // Pass the track URIs\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error adding tracks to playlist');\n      }\n      console.log('Tracks added successfully!');\n    } catch (err) {\n      setError(err.message);\n      console.error('Error adding tracks:', err);\n    }\n  };\n\n  // Handle the Save To Spotify button click\n  const handleSaveToSpotify = async () => {\n    setIsSaving(true);\n    setError(null);\n    try {\n      // Step 1: Get access token\n      const accessToken = await getSpotifyToken(); // Get the Spotify token\n\n      // Step 2: Create playlist and add tracks\n      await createPlaylist(accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error saving playlist:', err);\n    }\n    setIsSaving(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveToSpotify,\n      disabled: isSaving,\n      children: isSaving ? 'Saving to Spotify...' : 'Save To Spotify'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(SaveToSpotify, \"okUNVmbIMr63w2X5gaeUA6+BQsI=\");\n_c = SaveToSpotify;\nexport default SaveToSpotify;\nvar _c;\n$RefreshReg$(_c, \"SaveToSpotify\");","map":{"version":3,"names":["React","useState","useEffect","getSpotifyToken","fetchSpotifyData","jsxDEV","_jsxDEV","SaveToSpotify","playlistTracks","playlistName","_s","isSaving","setIsSaving","error","setError","clientId","clientSecret","token","createPlaylist","accessToken","userData","userId","id","createPlaylistResponse","method","body","JSON","stringify","name","description","public","playlistId","addTracksToPlaylist","err","message","console","trackUris","map","track","uri","addTracksResponse","fetch","headers","Authorization","uris","ok","Error","log","handleSaveToSpotify","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getSpotifyToken } from \"../spotifyAuth\";\nimport { fetchSpotifyData } from \"../spotifyApi\";\n\nconst SaveToSpotify = ({ playlistTracks, playlistName }) => {\n    const [isSaving, setIsSaving] = useState(false);\n    const [error, setError] = useState(null);\n    const clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\"; \nconst token = getSpotifyToken(clientId, clientSecret);\n\n\n  // Function to create a new playlist\n  const createPlaylist = async (accessToken) => {\n    try {\n      // Get user ID\n      const userData = await fetchSpotifyData('/me', token);  // Using your fetchSpotifyData function\n      const userId = userData.id;\n\n      // Create new playlist\n      const createPlaylistResponse = await fetchSpotifyData(`/users/${userId}/playlists`, token, {\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName,\n          description: 'A custom playlist from Jammming!',\n          public: true,\n        }),\n      });\n\n      const playlistId = createPlaylistResponse.id;\n\n      // Step 2: Add tracks to the newly created playlist\n      await addTracksToPlaylist(playlistId, token);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error creating playlist:', err);\n    }\n  };\n\n  // Function to add tracks to the playlist\n  const addTracksToPlaylist = async (playlistId, accessToken) => {\n    try {\n      const trackUris = playlistTracks.map((track) => track.uri);\n\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          uris: trackUris,  // Pass the track URIs\n        }),\n      });\n\n      if (!addTracksResponse.ok) {\n        throw new Error('Error adding tracks to playlist');\n      }\n\n      console.log('Tracks added successfully!');\n    } catch (err) {\n      setError(err.message);\n      console.error('Error adding tracks:', err);\n    }\n  };\n\n  // Handle the Save To Spotify button click\n  const handleSaveToSpotify = async () => {\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      // Step 1: Get access token\n      const accessToken = await getSpotifyToken();  // Get the Spotify token\n\n      // Step 2: Create playlist and add tracks\n      await createPlaylist(accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error saving playlist:', err);\n    }\n\n    setIsSaving(false);\n  };\n\n  return (\n    <div>\n      <button onClick={handleSaveToSpotify} disabled={isSaving}>\n        {isSaving ? 'Saving to Spotify...' : 'Save To Spotify'}\n      </button>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </div>\n  );\n};\n\nexport default SaveToSpotify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}