{"ast":null,"code":"var _jsxFileName = \"/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SaveToSpotify = ({\n  playlistTracks,\n  playlistName\n}) => {\n  _s();\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const clientId = \"1840d8c49ff1481c8748e3e4188f320f\";\n  const clientSecret = \"c81dfd43be3746b894a59a9956a1247e\";\n  const createPlaylist = async () => {\n    try {\n      const token = await getSpotifyToken(clientId, clientSecret);\n      const response = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}` // Use the access token here\n        }\n      });\n      const userData = await response.json();\n      const userId = userData.id; // User's Spotify ID\n\n      // Create the new playlist\n      const createPlaylistResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName,\n          // Playlist name passed from props\n          description: 'A custom playlist from Jammming!',\n          public: true\n        })\n      });\n      if (!createPlaylistResponse.ok) {\n        throw new Error('Error creating playlist');\n      }\n      const playlistData = await createPlaylistResponse.json();\n      const playlistId = playlistData.id; // Newly created playlist ID\n\n      // Step 2: Add tracks to the newly created playlist\n      await addTracksToPlaylist(playlistId);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error creating playlist:', err);\n    }\n  };\n\n  // Step 2: Add tracks to the new playlist\n  const addTracksToPlaylist = async playlistId => {\n    try {\n      // Get the track URIs from the playlistTracks\n      const trackUris = playlistTracks.map(track => track.uri);\n\n      // Make a request to add the tracks to the new playlist\n      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: trackUris // Pass the track URIs\n        })\n      });\n      if (!addTracksResponse.ok) {\n        throw new Error('Error adding tracks to playlist');\n      }\n      console.log('Tracks added successfully!');\n    } catch (err) {\n      setError(err.message);\n      console.error('Error adding tracks:', err);\n    }\n  };\n\n  // Handle the Save To Spotify button click\n  const handleSaveToSpotify = () => {\n    setIsSaving(true);\n    setError(null);\n    createPlaylist(); // Call the createPlaylist function\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveToSpotify,\n      disabled: isSaving,\n      children: isSaving ? 'Saving to Spotify...' : 'Save To Spotify'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(SaveToSpotify, \"okUNVmbIMr63w2X5gaeUA6+BQsI=\");\n_c = SaveToSpotify;\nexport default SaveToSpotify;\nvar _c;\n$RefreshReg$(_c, \"SaveToSpotify\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SaveToSpotify","playlistTracks","playlistName","_s","isSaving","setIsSaving","error","setError","clientId","clientSecret","createPlaylist","token","getSpotifyToken","response","fetch","method","headers","Authorization","userData","json","userId","id","createPlaylistResponse","body","JSON","stringify","name","description","public","ok","Error","playlistData","playlistId","addTracksToPlaylist","err","message","console","trackUris","map","track","uri","addTracksResponse","uris","log","handleSaveToSpotify","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["/Users/sarah/Documents/Projects/React/jammming/jammming/src/components/SaveToSpotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SaveToSpotify = ({ playlistTracks, playlistName }) => {\n    const [isSaving, setIsSaving] = useState(false);\n    const [error, setError] = useState(null);\n    const clientId = \"1840d8c49ff1481c8748e3e4188f320f\"; \nconst clientSecret = \"c81dfd43be3746b894a59a9956a1247e\"; \n\n  \n    const createPlaylist = async () => {\n        try {\n         const token = await getSpotifyToken(clientId, clientSecret);\n         const response = await fetch('https://api.spotify.com/v1/me', {\n            method: 'GET',\n            headers: {\n              Authorization: `Bearer ${token}`,  // Use the access token here\n            },\n          });\n\n          const userData = await response.json();\n          const userId = userData.id;  // User's Spotify ID\n    \n          // Create the new playlist\n          const createPlaylistResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              name: playlistName,  // Playlist name passed from props\n              description: 'A custom playlist from Jammming!',\n              public: true,\n            }),\n          });\n    \n          if (!createPlaylistResponse.ok) {\n            throw new Error('Error creating playlist');\n          }\n    \n          const playlistData = await createPlaylistResponse.json();\n          const playlistId = playlistData.id;  // Newly created playlist ID\n    \n          // Step 2: Add tracks to the newly created playlist\n          await addTracksToPlaylist(playlistId);\n        } catch (err) {\n          setError(err.message);\n          console.error('Error creating playlist:', err);\n        }\n      };\n    \n      // Step 2: Add tracks to the new playlist\n      const addTracksToPlaylist = async (playlistId) => {\n        try {\n          // Get the track URIs from the playlistTracks\n          const trackUris = playlistTracks.map(track => track.uri);\n    \n          // Make a request to add the tracks to the new playlist\n          const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n            method: 'POST',\n            headers: {\n              Authorization: `Bearer ${token}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              uris: trackUris,  // Pass the track URIs\n            }),\n          });\n    \n          if (!addTracksResponse.ok) {\n            throw new Error('Error adding tracks to playlist');\n          }\n    \n          console.log('Tracks added successfully!');\n        } catch (err) {\n          setError(err.message);\n          console.error('Error adding tracks:', err);\n        }\n      };\n    \n      // Handle the Save To Spotify button click\n      const handleSaveToSpotify = () => {\n        setIsSaving(true);\n        setError(null);\n        createPlaylist();  // Call the createPlaylist function\n      };\n    \n      return (\n        <div>\n          <button onClick={handleSaveToSpotify} disabled={isSaving}>\n            {isSaving ? 'Saving to Spotify...' : 'Save To Spotify'}\n          </button>\n    \n          {error && <p style={{ color: 'red' }}>{error}</p>}\n        </div>\n      );\n    };\n    \n    export default SaveToSpotify;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}